Changes in module 'nf-core/cnvkit/batch'
--- modules/nf-core/cnvkit/batch/meta.yml
+++ modules/nf-core/cnvkit/batch/meta.yml
@@ -41,7 +41,7 @@
   - reference:
       type: file
       description: |
-        Input reference cnn-file (only for germline and tumor-only running)
+        Input reference cnn-file (only for germline and tumor-only runs)
 output:
   - meta:
       type: map

--- modules/nf-core/cnvkit/batch/main.nf
+++ modules/nf-core/cnvkit/batch/main.nf
@@ -8,12 +8,9 @@
         'biocontainers/mulled-v2-780d630a9bb6a0ff2e7b6f730906fd703e40e98f:c94363856059151a2974dc501fb07a0360cc60a3-0' }"
 
     input:
-    tuple val(meta), path(tumor), path(normal)
-    path  fasta
-    path  fasta_fai
+    tuple val(meta), path(normal), path(normal_index)
+    tuple val(meta2), path(fasta)
     path  targets
-    path  reference
-    val   panel_of_normals
 
     output:
     tuple val(meta), path("*.bed"), emit: bed
@@ -29,73 +26,27 @@
 
     script:
     def args = task.ext.args ?: ''
+    def prefix = task.ext.prefix ?: "${meta.id}"
 
-    def tumor_exists = tumor ? true : false
-    def normal_exists = normal ? true : false
+    // PON needs --normal, target files if they exists
+    fasta_args = fasta ? "--fasta ${fasta}" : ""
+    target_args = targets ? "--targets ${targets}" : ""
 
-    // execute samtools only when cram files are input, cnvkit runs natively on bam but is prohibitively slow
-    def tumor_cram = tumor_exists && tumor.Extension == "cram" ? true : false
-    def normal_cram = normal_exists && normal.Extension == "cram" ? true : false
-    def tumor_bam = tumor_exists && tumor.Extension == "bam" ? true : false
-    def normal_bam = normal_exists && normal.Extension == "bam" ? true : false
+    pon_input = normal.collect().join(' ')
+    normal_args = "--normal $pon_input"
 
-    def tumor_out = tumor_cram ? tumor.BaseName + ".bam" : "${tumor}"
-
-    // tumor_only mode does not need fasta & target
-    // instead it requires a pre-computed reference.cnn which is built from fasta & target
-    def (normal_out, normal_args, fasta_args) = ["", "", ""]
-    def fai_reference = fasta_fai ? "--fai-reference ${fasta_fai}" : ""
-
-    if (normal_exists){
-        def normal_prefix = normal.BaseName
-        normal_out = normal_cram ? "${normal_prefix}" + ".bam" : "${normal}"
-        fasta_args = fasta ? "--fasta $fasta" : ""
-
-        // germline mode
-        // normal samples must be input without a flag
-        // requires flag --normal to be empty []
-        if(!tumor_exists){
-            tumor_out = "${normal_prefix}" + ".bam"
-            normal_args = "--normal "
-        }
-        // somatic mode
-        else {
-            normal_args = normal_prefix ? "--normal $normal_out" : ""
-        }
-    }
-
-    // generation of panel of normals
-    def generate_pon = panel_of_normals ? true : false
-
-    if (generate_pon && !tumor_exists){
-        def pon_input = normal.join(' ')
-        normal_args = "--normal $pon_input"
-        tumor_out = ""
-    }
-
-    def target_args = targets ? "--targets $targets" : ""
-    def reference_args = reference ? "--reference $reference" : ""
-
-    def samtools_cram_convert = ''
-    samtools_cram_convert += normal_cram ? "    samtools view -T $fasta $fai_reference $normal -@ $task.cpus -o $normal_out\n" : ''
-    samtools_cram_convert += normal_cram ? "    samtools index $normal_out\n" : ''
-    samtools_cram_convert += tumor_cram ? "    samtools view -T $fasta $fai_reference $tumor -@ $task.cpus -o $tumor_out\n" : ''
-    samtools_cram_convert += tumor_cram ? "    samtools index $tumor_out\n" : ''
-    def versions = normal_cram || tumor_cram ?
-        "samtools: \$(echo \$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\$//')\n        cnvkit: \$(cnvkit.py version | sed -e 's/cnvkit v//g')" :
+    def versions =
         "cnvkit: \$(cnvkit.py version | sed -e 's/cnvkit v//g')"
     """
-    $samtools_cram_convert
 
     cnvkit.py \\
         batch \\
-        $tumor_out \\
         $normal_args \\
         $fasta_args \\
-        $reference_args \\
         $target_args \\
         --processes $task.cpus \\
-        $args
+        $args \\
+        --output-reference ${prefix}.cnn
 
     cat <<-END_VERSIONS > versions.yml
     "${task.process}":

************************************************************
